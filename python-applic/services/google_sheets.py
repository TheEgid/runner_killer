import os
from typing import Dict, List, Union
import gspread # type: ignore
from google.oauth2.service_account import Credentials # type: ignore

from models import LightTask

class GoogleSheetsService:
    def __init__(self):
        self.credentials = self._setup_credentials()
        self.client = gspread.authorize(self.credentials)

    def _setup_credentials(self):
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]

        creds_info = {
            "type": "service_account",
            "project_id": os.getenv("GOOGLE_PROJECT_ID"),
            "private_key": os.getenv("GOOGLE_PRIVATE_KEY").replace('\\n', '\n'),
            "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
            "token_uri": "https://oauth2.googleapis.com/token",
        }

        return Credentials.from_service_account_info(creds_info, scopes=scope)

    def read_sheet(self, spreadsheet_id: str, sheet_name: str) -> Dict:
        sheet = self.client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        records = sheet.get_all_records()
        return records[0] if records else {}

    def read_sheets(self, spreadsheet_id: str, sheet_name: str) -> List[Dict]:
        try:
            sheet = self.client.open_by_key(spreadsheet_id).worksheet(sheet_name)
            records = sheet.get_all_records()
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")

            if not records:
                print("‚ö†Ô∏è –õ–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return []

            return records if isinstance(records, list) else [records]

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets: {e}")
            return []

        #  def update_results(self, spreadsheet_id: str, results: Dict):
        #         sheet = self.client.open_by_key(spreadsheet_id).worksheet("–†–∞–±–æ—á–∏–π")

        #         # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
        #         row_num = self._find_row_by_number(sheet, results["–ù–æ–º–µ—Ä"])

        #         if row_num:
        #             # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏
        #             updates = []
        #             for col, value in results.items():
        #                 col_num = self._get_column_number(sheet, col)
        #                 if col_num:
        #                     updates.append({
        #                         'range': f'{self._number_to_letter(col_num)}{row_num}',
        #                         'values': [[value]]
        #                     })

        #             sheet.batch_update(updates)

    def update_task_status(self, spreadsheet_id: str, sheet_name: str, url: str, new_status: str) -> bool:
        try:
            sheet = self.client.open_by_key(spreadsheet_id).worksheet(sheet_name)
            records = sheet.get_all_records()

            if not records:
                print("‚ö†Ô∏è –õ–∏—Å—Ç –ø—É—Å—Ç")
                return False

            headers = [h.lower() for h in sheet.row_values(1)]

            if "url" not in headers or "status" not in headers:
                print("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ 'url' –∏–ª–∏ 'status'")
                return False

            status_col = headers.index("status") + 1

            for i, record in enumerate(records, start=2):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏
                # –∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                record = {k.lower(): v for k, v in record.items()}

                if record.get("url") == url:
                    if record.get("status") != new_status:
                        sheet.update_cell(i, status_col, new_status)
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {url}: {new_status}")
                    return True

            print(f"‚ö†Ô∏è URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ: {url}")
            return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {url}: {type(e).__name__}: {e}")
            return False

    def add_tasks_if_not_exists(self, spreadsheet_id: str, sheet_name: str, tasks: List[LightTask]) -> List[LightTask]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ URL –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã.

        Args:
            spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            tasks: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ LightTask –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        Returns:
            list: –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á LightTask
        """
        try:
            sheet = self.client.open_by_key(spreadsheet_id).worksheet(sheet_name)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (URL)
            url_column_values = sheet.col_values(2)

            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏, URL –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
            tasks_to_add = [task for task in tasks if task.url not in url_column_values]

            if not tasks_to_add:
                print("‚ö†Ô∏è –í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
                return []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –º—ã –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫
            current_row_count = len(url_column_values)
            max_rows = 20000

            if current_row_count + len(tasks_to_add) > max_rows:
                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                can_add_count = max_rows - current_row_count
                tasks_to_add = tasks_to_add[:can_add_count]
                print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {can_add_count} –∑–∞–¥–∞—á")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            data = []
            for task in tasks_to_add:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏ URL –≤–æ –≤—Ç–æ—Ä–æ–π
                data.append([task.status, task.url])
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.status} - {task.url}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            sheet.append_rows(data, value_input_option='USER_ENTERED')

            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tasks_to_add)} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
            return tasks_to_add

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {type(e).__name__}: {e}")
            return []
